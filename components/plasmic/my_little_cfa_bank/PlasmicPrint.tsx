// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rGmX6BSMLHk1Z9e2eiJSJA
// Component: zHHXsEEx_TUZo
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 9R92pPq23TkPW/component
import TextInput from "../../TextInput"; // plasmic-import: JT94ttowfFlvD/component
import Button from "../../Button"; // plasmic-import: 7w9cR6XePFiQt/component
import Footer from "../../Footer"; // plasmic-import: R5GryniBCG7Hz/component

import { useScreenVariants as useScreenVariantsiqKsYnOgazJg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: iqKSYnOgaz-Jg/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_my_little_cfa_bank.module.css"; // plasmic-import: rGmX6BSMLHk1Z9e2eiJSJA/projectcss
import sty from "./PlasmicPrint.module.css"; // plasmic-import: zHHXsEEx_TUZo/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: znHZ-6f3V1I0-g/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: eErz3M9edMZbiJ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hbTg-QMZzAOv8A/icon

export type PlasmicPrint__VariantMembers = {};
export type PlasmicPrint__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrint__VariantsArgs;
export const PlasmicPrint__VariantProps = new Array<VariantPropType>();

export type PlasmicPrint__ArgsType = {};
type ArgPropType = keyof PlasmicPrint__ArgsType;
export const PlasmicPrint__ArgProps = new Array<ArgPropType>();

export type PlasmicPrint__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  section?: p.Flex<"section">;
  text?: p.Flex<"div">;
  balanceBox?: p.Flex<"div">;
  textBox?: p.Flex<"div">;
  amountInput?: p.Flex<typeof TextInput>;
  msgBox?: p.Flex<"div">;
  print?: p.Flex<typeof Button>;
  action?: p.Flex<typeof Button>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPrintProps {}

function PlasmicPrint__RenderFunc(props: {
  variants: PlasmicPrint__VariantsArgs;
  args: PlasmicPrint__ArgsType;
  overrides: PlasmicPrint__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsiqKsYnOgazJg()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__vlOyq)}>
              <p.Stack
                as={"section"}
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                hasGap={true}
                className={classNames(projectcss.all, sty.section)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "Instead of spending millions, hiring thousands of unuseful consultants, waste years of work, we invite any 'central bank' of this planet to use a standard ERC-20 on top of any L2. This is "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{
                        fontWeight: 700,
                        textDecorationLine: "underline"
                      }}
                    >
                      {"for educational purposes only"}
                    </span>
                    <React.Fragment>
                      {
                        ": what you're issuing is a currency that circulates on a test network called "
                      }
                    </React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link___19P7E
                        )}
                        component={Link}
                        href={"https://goerli.net/" as const}
                        platform={"nextjs"}
                      >
                        {"Goerli"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>
                      {". It is as secured as our good old euro. "}
                    </React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link___2RUb
                        )}
                        component={Link}
                        href={`/about`}
                        platform={"nextjs"}
                      >
                        {"Learn more about the CBDC thing"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"."}</React.Fragment>
                  </React.Fragment>
                </div>

                <div
                  data-plasmic-name={"balanceBox"}
                  data-plasmic-override={overrides.balanceBox}
                  className={classNames(projectcss.all, sty.balanceBox)}
                >
                  <div
                    data-plasmic-name={"textBox"}
                    data-plasmic-override={overrides.textBox}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.textBox
                    )}
                  >
                    {"Your wallet is currently holding 10,000 EUR."}
                  </div>
                </div>

                <TextInput
                  data-plasmic-name={"amountInput"}
                  data-plasmic-override={overrides.amountInput}
                  className={classNames("__wab_instance", sty.amountInput)}
                  name={"amountInput" as const}
                />

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gwk4M)}
                  >
                    <div
                      data-plasmic-name={"msgBox"}
                      data-plasmic-override={overrides.msgBox}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.msgBox
                      )}
                    >
                      {"Message in a bottle, yo."}
                    </div>

                    <Button
                      data-plasmic-name={"print"}
                      data-plasmic-override={overrides.print}
                      className={classNames("__wab_instance", sty.print)}
                    >
                      {"Print"}
                    </Button>

                    {true ? (
                      <Button
                        data-plasmic-name={"action"}
                        data-plasmic-override={overrides.action}
                        className={classNames("__wab_instance", sty.action)}
                        color={"blue" as const}
                      >
                        {"Do something"}
                      </Button>
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "section",
    "text",
    "balanceBox",
    "textBox",
    "amountInput",
    "msgBox",
    "print",
    "action",
    "footer"
  ],
  header: ["header"],
  section: [
    "section",
    "text",
    "balanceBox",
    "textBox",
    "amountInput",
    "msgBox",
    "print",
    "action"
  ],
  text: ["text"],
  balanceBox: ["balanceBox", "textBox"],
  textBox: ["textBox"],
  amountInput: ["amountInput"],
  msgBox: ["msgBox"],
  print: ["print"],
  action: ["action"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  section: "section";
  text: "div";
  balanceBox: "div";
  textBox: "div";
  amountInput: typeof TextInput;
  msgBox: "div";
  print: typeof Button;
  action: typeof Button;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrint__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrint__VariantsArgs;
    args?: PlasmicPrint__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrint__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPrint__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPrint__ArgProps,
          internalVariantPropNames: PlasmicPrint__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPrint__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrint";
  } else {
    func.displayName = `PlasmicPrint.${nodeName}`;
  }
  return func;
}

export const PlasmicPrint = Object.assign(
  // Top-level PlasmicPrint renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),
    balanceBox: makeNodeComponent("balanceBox"),
    textBox: makeNodeComponent("textBox"),
    amountInput: makeNodeComponent("amountInput"),
    msgBox: makeNodeComponent("msgBox"),
    print: makeNodeComponent("print"),
    action: makeNodeComponent("action"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPrint
    internalVariantProps: PlasmicPrint__VariantProps,
    internalArgProps: PlasmicPrint__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPrint;
/* prettier-ignore-end */
